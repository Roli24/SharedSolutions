name: PR Review Automation

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  review-pr:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ensures full git history for diff

      - name: Install Dependencies
        run: |
          echo "🔹 Updating system and installing dependencies..."
          sudo apt update && sudo apt install -y jq curl
          echo "✅ Dependencies installed."

      - name: Install Ollama (if not already installed)
        run: |
          if ! command -v ollama &> /dev/null; then
            echo "🔹 Installing Ollama..."
            curl -fsSL https://ollama.com/install.sh | bash
            nohup ollama serve > /dev/null 2>&1 &  # Run Ollama in the background
            sleep 5  # Give it some time to start
            echo "✅ Ollama installed and running."
          else
            echo "✅ Ollama is already installed."
          fi

      - name: Create Modelfile for AI Review
        run: |
          echo "🔹 Creating Modelfile for PR review..."
          
          cat <<EOF > Modelfile
          FROM mistral

          SYSTEM "You are an AI-powered PR reviewer for Java code. Review files strictly based on these rules and return issues in a structured format:

          - **Use camelCase for variables**, PascalCase for classes.
          - **Ensure proper logging** is present for all methods.
          - **Use CustomException** for handling errors instead of generic exceptions.
          - **No hardcoded values**; use environment variables or constants.
          - **Methods should follow the Single Responsibility Principle (SRP)**.
          - **All new methods must have tests**.

          Return the output in JSON format:
          [
            {
              'file': '<file_name>',
              'line': <line_number>,
              'rule_violated': '<rule>',
              'description': '<detailed explanation>'
            }
          ]

          If there are no issues, return an empty array: []
          "
          EOF

          echo "✅ Modelfile created."

      - name: Create Custom AI Model (if not exists)
        run: |
          if ollama list | grep -q "my-pr-review-model"; then
            echo "✅ Custom AI model already exists."
          else
            echo "🔹 Creating custom AI model..."
            ollama create my-pr-review-model -f Modelfile
            echo "✅ Custom AI model 'my-pr-review-model' created."
          fi

      - name: Fetch PR Changes
        run: |
          echo "🔹 Fetching latest changes from main branch..."
          git fetch origin main
          
          echo "🔹 Listing changed files in this PR..."
          CHANGED_FILES=$(git diff --name-only origin/main...HEAD | grep '\.java$' || true)

          if [[ -z "$CHANGED_FILES" ]]; then
            echo "✅ No Java files detected. Skipping review."
            exit 0
          fi
          
          echo "✅ Java files detected for review:"
          echo "$CHANGED_FILES"

      - name: Run PR Review with Custom AI Model
        run: |
          echo "🔹 Running PR review with custom AI model..."
          echo "### 🤖 PR Review Bot Results:" > pr_review.txt

          for FILE in $(git diff --name-only origin/main...HEAD | grep '\.java$' || true); do
            echo "🔹 Reviewing $FILE..."
            CODE=$(cat "$FILE")

            if [[ -z "$CODE" ]]; then
              echo "❌ Skipping empty file: $FILE"
              continue
            fi

            # Run the custom AI model for review and parse structured JSON output
            REVIEW_RESULT=$(echo -e "Review the following Java file and return issues in JSON format:\n\n$CODE" | ollama run my-pr-review-model)

            if [[ -z "$REVIEW_RESULT" || "$REVIEW_RESULT" == "[]" ]]; then
              echo "✅ No issues found in $FILE."
              continue
            fi

            # Process JSON output and format for GitHub comment
            echo "### ❌ Issues in \`$FILE\`:" >> pr_review.txt
            echo "$REVIEW_RESULT" | jq -r '.[] | "🚨 Line \(.line): **\(.rule_violated)** - \(.description)"' >> pr_review.txt
          done

          echo "🔹 Final PR review output:"
          cat pr_review.txt

      - name: Debug PR Review Output
        run: |
          echo "🔹 PR Review Output:"
          cat pr_review.txt  # Prints the content for debugging

      - name: Load PR Review Output into ENV
        run: echo "PR_REVIEW_CONTENT<<EOF" >> $GITHUB_ENV && cat pr_review.txt >> $GITHUB_ENV && echo "EOF" >> $GITHUB_ENV

      - name: Post PR Review Comments
        uses: thollander/actions-comment-pull-request@v2
        with:
          message: "${{ env.PR_REVIEW_CONTENT }}"

